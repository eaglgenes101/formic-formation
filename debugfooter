// Debug footer
// Contains functions used for debugging, as well as scripting to make use of them

function ant_char(cell)
{
	if (is_enemy(cell))
	{
		if (is_harvestable(cell)) return "◉ ";
		else return "◌ ";
	}
	else if (is_ally(cell))
	{
		if (cell === 4 || is_like(cell) || is_other(cell))
			switch(view[cell].ant.type)
			{
				case QUEEN: return "Q ";
				case MARCHER_A: return "A ";
				case MARCHER_B: return "B ";
				case GATHERER: return "G ";
				default: return "? ";
			}
		else
			switch(view[cell].ant.type)
			{
				case QUEEN: return "q ";
				case MARCHER_A: return "a ";
				case MARCHER_B: return "b ";
				case GATHERER: return "g ";
				default: return "? ";
			}
	}
	else if (view[cell].food === 1) return "● ";
	else return ". ";
}

function debug_view()
{
	var c = view_corner();
	debug(ant_char(CCW[c][0]) + ant_char(CCW[c][7]) + ant_char(CCW[c][6]));
	debug(ant_char(CCW[c][1]) + ant_char(            4 ) + ant_char(CCW[c][5]));
	debug(ant_char(CCW[c][2]) + ant_char(CCW[c][3]) + ant_char(CCW[c][4]));
	debug(this_ant().type === QUEEN ? "============" : "------");
}

debug_view();
var decision = main_decide();
return decision;
