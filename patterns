// Pattern matching subroutines

function is_gatherer_marcher(cell)
{
	if (!is_ally(cell) || view[cell].ant.food > 0 || view[cell].ant.type !== GATHERER) return false;
	if (this_ant().type === QUEEN) return true;

	lh_cell = CCW[cell][1];
	rh_cell = CCW[cell][7];

	if (is_ally(lh_cell) && view[lh_cell].ant.type === QUEEN) return !is_ally(rh_cell)
	else if (is_ally(rh_cell) && view[rh_cell].ant.type === QUEEN) return !is_ally(lh_cell)
	else return false;
}

function is_like(cell)
{
	if (view[cell].color === U_PANIC) return false;
	if (is_ally(CCW[cell][1]) && view[CCW[cell][1]].color === U_PANIC) return false;
	if (is_ally(CCW[cell][7]) && view[CCW[cell][7]].color === U_PANIC) return false;
	if (CORNERS.includes(cell) && is_ally(cell))
	{
		switch(view[cell].ant.type)
		{
			case MARCHER_A: return view[cell].ant.food === 0 && this_ant().type !== MARCHER_B;
			case MARCHER_B: return view[cell].ant.food === 0 && this_ant().type !== MARCHER_A;
			case GATHERER: return is_gatherer_marcher(cell) && this_ant().type !== GATHERER;
			case QUEEN: return true;
			default: return false;
		}
	}
	return false;
}

function is_other(cell)
{
	if (view[cell].color === U_PANIC) return false;
	if (EDGES.includes(cell) && is_ally(cell))
	{
		switch(view[cell].ant.type)
		{
			case MARCHER_A: return view[cell].ant.food === 0 && this_ant().type !== MARCHER_A;
			case MARCHER_B: return view[cell].ant.food === 0 && this_ant().type !== MARCHER_B;
			case GATHERER: return this_ant().type === QUEEN
			case QUEEN: return true;
			default: return false;
		}
	}
	return false;
}

function view_corner()
{
	var scores = [0,0,0,0];
	for (var i = 0; i < 4; i++)
		for (var j = 0; j < 8; j++)
		{
			scores[i] *= 2;
			var try_cell = CCW[CORNERS[i]][j];
			if (is_ally(try_cell) && (is_like(try_cell) || is_other(try_cell))) scores[i]++;
		}
	if (scores[0] > scores[1] && scores[0] > scores[2] && scores[0] > scores[3]) return CORNERS[0];
	else if (scores[1] > scores[2] && scores[1] > scores[3]) return CORNERS[1];
	else if (scores[2] > scores[3]) return CORNERS[2];
	else return CORNERS[3];
}

/*Formation position constants
***
aB*
****/const ONE_EDGE = 10;/*
a**
*B*
****/const ONE_CORNER = 11;/*
***
aB*
*a**/const EE_BENT = 20;/*
***
aBa
****/const EE_STRAIGHT = 21;/*
b**
aB*
****/const EC_LEFT = 22;/*
ba*
*B*
****/const EC_RIGHT = 23;/*
b**
*Ba
****/const EC_SKEWED = 24;/*
b**
*B*
*a**/const EC_SPAWN = 25;/*
b**
*B*
b***/const CC_EDGED = 26;/*
b**
*B*
b***/const CC_LINE = 27;/*
b**
aB*
*a**/const THREE_MARCH = 30;/*
ba*
*B*
*a**/const THREE_STAND = 31;/*
b**
aBa
****/const THREE_RECOVER = 32;/*
ba*
*Ba
****/const THREE_UNSTAND = 33;/*
ba*
aB*
****/const THREE_BLOCK = 34;/*
b**
*B*
*ab*/const THREE_HANG = 35;/*
b**
aB*
**b*/const THREE_UNHANG = 36;/*
b**
aB*
b***/const THREE_SIDE = 37;/*
ba*
*B*
*ab*/const FOUR_Z = 40;/*
b**
aB*
*ab*/const FOUR_STAIRS = 41;/*
b**
aB*
ba**/const FOUR_BENT = 42;

//Provides the formation number as enumerated above, or null if none apply, given the canonical c
function neighbor_type(top_left)
{
	var corners = [];
	for (try_cell of CORNERS)
		if (is_ally(try_cell) && is_like(try_cell)) corners.push(try_cell);
	var edges = [];
	for (try_cell of EDGES)
		if (is_ally(try_cell) && is_other(try_cell)) edges.push(try_cell);
	if (corners.length === 1 && edges.length === 0) return ONE_CORNER;
	if (corners.length === 0 && edges.length === 1) return ONE_EDGE;
	if (corners.length === 0 && edges.length === 2) return (edges[1] === CCW[edges[0]][4]) ? EE_STRAIGHT : EE_BENT;
	if (corners.length === 2 && edges.length === 0) return (corners[1] === CCW[corners[0]][4]) ? CC_LINE : CC_EDGED;
	else if (corners.length === 1 && edges.length === 1)
	{
		if (edges[0] === CCW[top_left][1]) return EC_LEFT;
		if (edges[0] === CCW[top_left][3]) return EC_SPAWN;
		if (edges[0] === CCW[top_left][5]) return EC_SKEWED;
		if (edges[0] === CCW[top_left][7]) return EC_RIGHT;
		return null;
	}
	else if (corners.length === 1 && edges.length === 2)
	{
		if (edges.includes(CCW[top_left][1]) && edges.includes(CCW[top_left][3])) return THREE_MARCH;
		if (edges.includes(CCW[top_left][3]) && edges.includes(CCW[top_left][7])) return THREE_STAND;
		if (edges.includes(CCW[top_left][1]) && edges.includes(CCW[top_left][5])) return THREE_RECOVER;
		if (edges.includes(CCW[top_left][5]) && edges.includes(CCW[top_left][7])) return THREE_UNSTAND;
		if (edges.includes(CCW[top_left][1]) && edges.includes(CCW[top_left][7])) return THREE_BLOCK;
		return null;
	}
	else if (corners.length === 2 && edges.length === 1)
	{
		if (corners.includes(CCW[top_left][4]) && edges.includes(CCW[top_left][3])) return THREE_HANG;
		if (corners.includes(CCW[top_left][4]) && edges.includes(CCW[top_left][1])) return THREE_UNHANG;
		if (corners.includes(CCW[top_left][2]) && edges.includes(CCW[top_left][1])) return THREE_SIDE;
	}
	else if (corners.length === 2 && edges.length === 2)
	{
		if (edges.includes(CCW[top_left][3]) && edges.includes(CCW[top_left][7]) && corners.includes(CCW[top_left][4])) 
			return FOUR_Z;
		if (edges.includes(CCW[top_left][1]) && edges.includes(CCW[top_left][3]) && corners.includes(CCW[top_left][4])) 
			return FOUR_STAIRS;
		if (edges.includes(CCW[top_left][1]) && edges.includes(CCW[top_left][3]) && corners.includes(CCW[top_left][2]))
			return FOUR_BENT;
		return null;
	}
	return null;
}

