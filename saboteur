/*/
 * 
 * Saboteur routine for disrupting other nests
 * 
/*/

function sdecide_alone()
{
	//Actively avoid other allied workers
	for (try_cell of random_permutation(SCAN_MOVES))
		if (is_ally(try_cell) && view[CCW[try_cell][4]].ant === null) return {cell:CCW[try_cell][4]};

	var c = U_PANIC;
	for (try_cell of random_subset(SCAN_MOVES, 7))
		if (view[try_cell].color > 1 && view[try_cell].color !== c) 
		{
			c = view[try_cell].color;
			break;
		}
	if (view[4].color === 1) return {cell: 4, color: c};
	//Try to move in straight lines
	for (try_cell of random_permutation(CORNERS))
		if (view[try_cell].color === 1 && view[CCW[try_cell][4]].color !== 1) 
			return {cell:try_cell};
	for (try_cell of random_permutation(CORNERS))
		if (view[try_cell].color === 1 && view[CCW[try_cell][2]].color !== 1 && view[CCW[try_cell][6]].color !== 1) 
			return {cell:try_cell};

	return {cell:1};
}

function sdecide_erase()
{
	//Actively avoid other allied workers
	for (try_cell of random_permutation(SCAN_MOVES))
		if (is_ally(try_cell) && view[CCW[try_cell][4]].ant === null) return {cell:CCW[try_cell][4]};

	for (try_cell of random_permutation(SCAN_MOVES))
		if (view[try_cell].color !== 1) return {cell:try_cell, color:1};
	if (view[4].color !== 1) return {cell:4, color:1};

	return {cell:0};
}

function sdecide_discolor()
{
	//Recolor squares, with a pattern that is surprisingly good at breaking deadlocks
	if (view[1].color !== view[6].color && view[6].color !== 1) return {cell:1, color:view[6].color};
	if (view[2].color !== view[3].color) return {cell:3, color:view[2].color};
	
	for (try_cell of random_permutation(EDGES))
		if (view[try_cell].color !== 1) 
			if (view[CCW[try_cell][1]] !== 1 && view[CCW[try_cell][7]] !== 1) 
				return {cell:try_cell};
	for (try_cell of random_permutation(CORNERS))
		if (view[try_cell].color !== 1) 
			if (view[CCW[try_cell][1]] !== 1 || view[CCW[try_cell][7]] !== 1) 
				return {cell:try_cell};

	//Stick around allies
	for (try_cell of random_permutation(SCAN_MOVES))
		if (is_ally(try_cell)) 
			return {cell:try_cell};

	return {cell:0};
}

function sdecide_stride()
{
	var stride_scores = [0,0,0,0,0,0,0,0,0];
	for (try_cell of SCAN_MOVES)
	{
		if (view[try_cell].color !== view[CCW[try_cell][1]].color) stride_scores[try_cell] += 2;
		if (view[try_cell].color !== view[CCW[try_cell][7]].color) stride_scores[try_cell] += 2;
		if (view[try_cell].color !== view[CCW[try_cell][2]].color) stride_scores[try_cell] += 1;
		if (view[try_cell].color !== view[CCW[try_cell][6]].color) stride_scores[try_cell] += 1;
		if (view[try_cell].color !== view[4].color) stride_scores[try_cell] += 1;
	}
	var max_stride_score = Math.max(...stride_scores);
	for (var i = 0; i < 9; i++)
		if (stride_scores[i] === max_stride_score) return {cell:i};
	return {cell:0};
}

function sdecide_obstruct()
{
	//Obstruct enemy workers
	for (try_cell of random_permutation(SCAN_MOVES))
		if (is_enemy(try_cell)) 
		{
			if (random_choice(SABOTEUR_RECOLOR_PROB))
			{
				var rand_neighbors = random_subset(NEIGHBORS[try_cell], 2);
				if (rand_neighbors[0] !== rand_neighbors[1])
					return {cell:rand_neighbors[0], color:view[rand_neighbors[1]].color};
			}
			if (random_choice(SABOTEUR_OBSTRUCT_PROB)) return {cell:try_cell};
			for (ant_off of random_permutation([1,2,3,4,5,6,7]))
				if (view[CCW[try_cell][ant_off]].ant !== null)
				{
					if ([1,3].includes(ant_off) && random_choice(.3)) return {cell: CCW[try_cell][2]};
					if ([5,7].includes(ant_off) && random_choice(.3)) return {cell: CCW[try_cell][6]};
					if (ant_off === 2 && random_choice(.3)) return {cell: CCW[try_cell][1]};
					if (ant_off === 6 && random_choice(.3)) return {cell: CCW[try_cell][7]};
					if (ant_off === 4 && random_choice(.3)) return {cell: CCW[try_cell][random_choice(.5)?2:6]};
					if (random_choice(.3))
					{
						var rand_neighbors = random_subset(NEIGHBORS[try_cell], 2);
						if (rand_neighbors[0] !== rand_neighbors[1])
							return {cell:rand_neighbors[0], color:view[rand_neighbors[1]].color};
					}
				}
		}
	return {cell:1};
}

//Fallback function for workers
function saboteur()
{
	var num_enemies = 0;
	for (try_cell of SCAN_MOVES)
		if (is_enemy(try_cell)) num_enemies++;

	//Dispatch based on number of enemies present
	if (num_enemies > 0) return sdecide_obstruct();
	else
	{
		//Judge the diversity of colors around
		var colored_neighbors = 0;
		for (try_cell of SCAN_MOVES) 
			if (view[try_cell].color > 1) colored_neighbors++;
		if (colored_neighbors > 2)
		{
			var diversity = 45;
			var counts = [0,0,0,0,0,0,0,0,0];
			for (var i = 0; i < 9; i++) 
			{
				diversity -= 1 + counts[view[i].color];
				counts[view[i].color]++;
			}
			if (diversity >= DISCOLOR_THRESHOLD) return sdecide_discolor();
			else if (diversity >= ERASE_THRESHOLD) return sdecide_stride();
			else return sdecide_erase();
		}
		else return sdecide_alone();
	}
}
